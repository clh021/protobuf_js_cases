// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: window.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_window_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_window_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_window_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_window_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_window_2eproto;
namespace lnks {
class MainWindowList;
struct MainWindowListDefaultTypeInternal;
extern MainWindowListDefaultTypeInternal _MainWindowList_default_instance_;
class MainWindowProps;
struct MainWindowPropsDefaultTypeInternal;
extern MainWindowPropsDefaultTypeInternal _MainWindowProps_default_instance_;
class WindowId;
struct WindowIdDefaultTypeInternal;
extern WindowIdDefaultTypeInternal _WindowId_default_instance_;
}  // namespace lnks
PROTOBUF_NAMESPACE_OPEN
template<> ::lnks::MainWindowList* Arena::CreateMaybeMessage<::lnks::MainWindowList>(Arena*);
template<> ::lnks::MainWindowProps* Arena::CreateMaybeMessage<::lnks::MainWindowProps>(Arena*);
template<> ::lnks::WindowId* Arena::CreateMaybeMessage<::lnks::WindowId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lnks {

// ===================================================================

class WindowId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnks.WindowId) */ {
 public:
  inline WindowId() : WindowId(nullptr) {}
  ~WindowId() override;
  explicit constexpr WindowId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WindowId(const WindowId& from);
  WindowId(WindowId&& from) noexcept
    : WindowId() {
    *this = ::std::move(from);
  }

  inline WindowId& operator=(const WindowId& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowId& operator=(WindowId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WindowId& default_instance() {
    return *internal_default_instance();
  }
  static inline const WindowId* internal_default_instance() {
    return reinterpret_cast<const WindowId*>(
               &_WindowId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WindowId& a, WindowId& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WindowId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WindowId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WindowId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WindowId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WindowId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnks.WindowId";
  }
  protected:
  explicit WindowId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChromiumIdFieldNumber = 1,
    kGeckoIdFieldNumber = 2,
  };
  // optional int32 chromium_id = 1;
  bool has_chromium_id() const;
  private:
  bool _internal_has_chromium_id() const;
  public:
  void clear_chromium_id();
  int32_t chromium_id() const;
  void set_chromium_id(int32_t value);
  private:
  int32_t _internal_chromium_id() const;
  void _internal_set_chromium_id(int32_t value);
  public:

  // optional int32 gecko_id = 2;
  bool has_gecko_id() const;
  private:
  bool _internal_has_gecko_id() const;
  public:
  void clear_gecko_id();
  int32_t gecko_id() const;
  void set_gecko_id(int32_t value);
  private:
  int32_t _internal_gecko_id() const;
  void _internal_set_gecko_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:lnks.WindowId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t chromium_id_;
  int32_t gecko_id_;
  friend struct ::TableStruct_window_2eproto;
};
// -------------------------------------------------------------------

class MainWindowList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnks.MainWindowList) */ {
 public:
  inline MainWindowList() : MainWindowList(nullptr) {}
  ~MainWindowList() override;
  explicit constexpr MainWindowList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MainWindowList(const MainWindowList& from);
  MainWindowList(MainWindowList&& from) noexcept
    : MainWindowList() {
    *this = ::std::move(from);
  }

  inline MainWindowList& operator=(const MainWindowList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MainWindowList& operator=(MainWindowList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MainWindowList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MainWindowList* internal_default_instance() {
    return reinterpret_cast<const MainWindowList*>(
               &_MainWindowList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MainWindowList& a, MainWindowList& b) {
    a.Swap(&b);
  }
  inline void Swap(MainWindowList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MainWindowList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MainWindowList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MainWindowList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MainWindowList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MainWindowList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MainWindowList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnks.MainWindowList";
  }
  protected:
  explicit MainWindowList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowsFieldNumber = 2,
    kOkFieldNumber = 1,
  };
  // repeated .lnks.WindowId windows = 2;
  int windows_size() const;
  private:
  int _internal_windows_size() const;
  public:
  void clear_windows();
  ::lnks::WindowId* mutable_windows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnks::WindowId >*
      mutable_windows();
  private:
  const ::lnks::WindowId& _internal_windows(int index) const;
  ::lnks::WindowId* _internal_add_windows();
  public:
  const ::lnks::WindowId& windows(int index) const;
  ::lnks::WindowId* add_windows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnks::WindowId >&
      windows() const;

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnks.MainWindowList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnks::WindowId > windows_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_window_2eproto;
};
// -------------------------------------------------------------------

class MainWindowProps final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnks.MainWindowProps) */ {
 public:
  inline MainWindowProps() : MainWindowProps(nullptr) {}
  ~MainWindowProps() override;
  explicit constexpr MainWindowProps(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MainWindowProps(const MainWindowProps& from);
  MainWindowProps(MainWindowProps&& from) noexcept
    : MainWindowProps() {
    *this = ::std::move(from);
  }

  inline MainWindowProps& operator=(const MainWindowProps& from) {
    CopyFrom(from);
    return *this;
  }
  inline MainWindowProps& operator=(MainWindowProps&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MainWindowProps& default_instance() {
    return *internal_default_instance();
  }
  static inline const MainWindowProps* internal_default_instance() {
    return reinterpret_cast<const MainWindowProps*>(
               &_MainWindowProps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MainWindowProps& a, MainWindowProps& b) {
    a.Swap(&b);
  }
  inline void Swap(MainWindowProps* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MainWindowProps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MainWindowProps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MainWindowProps>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MainWindowProps& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MainWindowProps& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MainWindowProps* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnks.MainWindowProps";
  }
  protected:
  explicit MainWindowProps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 3,
    kWindowStateFieldNumber = 9,
    kIconFieldNumber = 11,
    kUrlFieldNumber = 12,
    kAppIdFieldNumber = 13,
    kIdFieldNumber = 1,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kWidthFieldNumber = 7,
    kOkFieldNumber = 2,
    kVisibilityFieldNumber = 4,
    kTopLevelFocusFieldNumber = 10,
    kSkipBarFieldNumber = 14,
    kHeightFieldNumber = 8,
    kAlwaysOnTopFieldNumber = 15,
  };
  // optional string title = 3;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string window_state = 9;
  bool has_window_state() const;
  private:
  bool _internal_has_window_state() const;
  public:
  void clear_window_state();
  const std::string& window_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_window_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_window_state();
  PROTOBUF_NODISCARD std::string* release_window_state();
  void set_allocated_window_state(std::string* window_state);
  private:
  const std::string& _internal_window_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_window_state(const std::string& value);
  std::string* _internal_mutable_window_state();
  public:

  // optional string icon = 11;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // optional string url = 12;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string app_id = 13;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // .lnks.WindowId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::lnks::WindowId& id() const;
  PROTOBUF_NODISCARD ::lnks::WindowId* release_id();
  ::lnks::WindowId* mutable_id();
  void set_allocated_id(::lnks::WindowId* id);
  private:
  const ::lnks::WindowId& _internal_id() const;
  ::lnks::WindowId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::lnks::WindowId* id);
  ::lnks::WindowId* unsafe_arena_release_id();

  // optional int32 x = 5;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 6;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // optional int32 width = 7;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // bool ok = 2;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // optional bool visibility = 4;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  bool visibility() const;
  void set_visibility(bool value);
  private:
  bool _internal_visibility() const;
  void _internal_set_visibility(bool value);
  public:

  // optional bool top_level_focus = 10;
  bool has_top_level_focus() const;
  private:
  bool _internal_has_top_level_focus() const;
  public:
  void clear_top_level_focus();
  bool top_level_focus() const;
  void set_top_level_focus(bool value);
  private:
  bool _internal_top_level_focus() const;
  void _internal_set_top_level_focus(bool value);
  public:

  // optional bool skip_bar = 14;
  bool has_skip_bar() const;
  private:
  bool _internal_has_skip_bar() const;
  public:
  void clear_skip_bar();
  bool skip_bar() const;
  void set_skip_bar(bool value);
  private:
  bool _internal_skip_bar() const;
  void _internal_set_skip_bar(bool value);
  public:

  // optional int32 height = 8;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // optional bool always_on_top = 15;
  bool has_always_on_top() const;
  private:
  bool _internal_has_always_on_top() const;
  public:
  void clear_always_on_top();
  bool always_on_top() const;
  void set_always_on_top(bool value);
  private:
  bool _internal_always_on_top() const;
  void _internal_set_always_on_top(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnks.MainWindowProps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr window_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::lnks::WindowId* id_;
  int32_t x_;
  int32_t y_;
  int32_t width_;
  bool ok_;
  bool visibility_;
  bool top_level_focus_;
  bool skip_bar_;
  int32_t height_;
  bool always_on_top_;
  friend struct ::TableStruct_window_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WindowId

// optional int32 chromium_id = 1;
inline bool WindowId::_internal_has_chromium_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WindowId::has_chromium_id() const {
  return _internal_has_chromium_id();
}
inline void WindowId::clear_chromium_id() {
  chromium_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t WindowId::_internal_chromium_id() const {
  return chromium_id_;
}
inline int32_t WindowId::chromium_id() const {
  // @@protoc_insertion_point(field_get:lnks.WindowId.chromium_id)
  return _internal_chromium_id();
}
inline void WindowId::_internal_set_chromium_id(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  chromium_id_ = value;
}
inline void WindowId::set_chromium_id(int32_t value) {
  _internal_set_chromium_id(value);
  // @@protoc_insertion_point(field_set:lnks.WindowId.chromium_id)
}

// optional int32 gecko_id = 2;
inline bool WindowId::_internal_has_gecko_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WindowId::has_gecko_id() const {
  return _internal_has_gecko_id();
}
inline void WindowId::clear_gecko_id() {
  gecko_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t WindowId::_internal_gecko_id() const {
  return gecko_id_;
}
inline int32_t WindowId::gecko_id() const {
  // @@protoc_insertion_point(field_get:lnks.WindowId.gecko_id)
  return _internal_gecko_id();
}
inline void WindowId::_internal_set_gecko_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  gecko_id_ = value;
}
inline void WindowId::set_gecko_id(int32_t value) {
  _internal_set_gecko_id(value);
  // @@protoc_insertion_point(field_set:lnks.WindowId.gecko_id)
}

// -------------------------------------------------------------------

// MainWindowList

// bool ok = 1;
inline void MainWindowList::clear_ok() {
  ok_ = false;
}
inline bool MainWindowList::_internal_ok() const {
  return ok_;
}
inline bool MainWindowList::ok() const {
  // @@protoc_insertion_point(field_get:lnks.MainWindowList.ok)
  return _internal_ok();
}
inline void MainWindowList::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void MainWindowList::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:lnks.MainWindowList.ok)
}

// repeated .lnks.WindowId windows = 2;
inline int MainWindowList::_internal_windows_size() const {
  return windows_.size();
}
inline int MainWindowList::windows_size() const {
  return _internal_windows_size();
}
inline void MainWindowList::clear_windows() {
  windows_.Clear();
}
inline ::lnks::WindowId* MainWindowList::mutable_windows(int index) {
  // @@protoc_insertion_point(field_mutable:lnks.MainWindowList.windows)
  return windows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnks::WindowId >*
MainWindowList::mutable_windows() {
  // @@protoc_insertion_point(field_mutable_list:lnks.MainWindowList.windows)
  return &windows_;
}
inline const ::lnks::WindowId& MainWindowList::_internal_windows(int index) const {
  return windows_.Get(index);
}
inline const ::lnks::WindowId& MainWindowList::windows(int index) const {
  // @@protoc_insertion_point(field_get:lnks.MainWindowList.windows)
  return _internal_windows(index);
}
inline ::lnks::WindowId* MainWindowList::_internal_add_windows() {
  return windows_.Add();
}
inline ::lnks::WindowId* MainWindowList::add_windows() {
  ::lnks::WindowId* _add = _internal_add_windows();
  // @@protoc_insertion_point(field_add:lnks.MainWindowList.windows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnks::WindowId >&
MainWindowList::windows() const {
  // @@protoc_insertion_point(field_list:lnks.MainWindowList.windows)
  return windows_;
}

// -------------------------------------------------------------------

// MainWindowProps

// .lnks.WindowId id = 1;
inline bool MainWindowProps::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool MainWindowProps::has_id() const {
  return _internal_has_id();
}
inline void MainWindowProps::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::lnks::WindowId& MainWindowProps::_internal_id() const {
  const ::lnks::WindowId* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::lnks::WindowId&>(
      ::lnks::_WindowId_default_instance_);
}
inline const ::lnks::WindowId& MainWindowProps::id() const {
  // @@protoc_insertion_point(field_get:lnks.MainWindowProps.id)
  return _internal_id();
}
inline void MainWindowProps::unsafe_arena_set_allocated_id(
    ::lnks::WindowId* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lnks.MainWindowProps.id)
}
inline ::lnks::WindowId* MainWindowProps::release_id() {
  
  ::lnks::WindowId* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lnks::WindowId* MainWindowProps::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:lnks.MainWindowProps.id)
  
  ::lnks::WindowId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::lnks::WindowId* MainWindowProps::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnks::WindowId>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::lnks::WindowId* MainWindowProps::mutable_id() {
  ::lnks::WindowId* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:lnks.MainWindowProps.id)
  return _msg;
}
inline void MainWindowProps::set_allocated_id(::lnks::WindowId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::lnks::WindowId>::GetOwningArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:lnks.MainWindowProps.id)
}

// bool ok = 2;
inline void MainWindowProps::clear_ok() {
  ok_ = false;
}
inline bool MainWindowProps::_internal_ok() const {
  return ok_;
}
inline bool MainWindowProps::ok() const {
  // @@protoc_insertion_point(field_get:lnks.MainWindowProps.ok)
  return _internal_ok();
}
inline void MainWindowProps::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void MainWindowProps::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:lnks.MainWindowProps.ok)
}

// optional string title = 3;
inline bool MainWindowProps::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MainWindowProps::has_title() const {
  return _internal_has_title();
}
inline void MainWindowProps::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MainWindowProps::title() const {
  // @@protoc_insertion_point(field_get:lnks.MainWindowProps.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MainWindowProps::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lnks.MainWindowProps.title)
}
inline std::string* MainWindowProps::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:lnks.MainWindowProps.title)
  return _s;
}
inline const std::string& MainWindowProps::_internal_title() const {
  return title_.Get();
}
inline void MainWindowProps::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MainWindowProps::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MainWindowProps::release_title() {
  // @@protoc_insertion_point(field_release:lnks.MainWindowProps.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MainWindowProps::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lnks.MainWindowProps.title)
}

// optional bool visibility = 4;
inline bool MainWindowProps::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MainWindowProps::has_visibility() const {
  return _internal_has_visibility();
}
inline void MainWindowProps::clear_visibility() {
  visibility_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool MainWindowProps::_internal_visibility() const {
  return visibility_;
}
inline bool MainWindowProps::visibility() const {
  // @@protoc_insertion_point(field_get:lnks.MainWindowProps.visibility)
  return _internal_visibility();
}
inline void MainWindowProps::_internal_set_visibility(bool value) {
  _has_bits_[0] |= 0x00000100u;
  visibility_ = value;
}
inline void MainWindowProps::set_visibility(bool value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:lnks.MainWindowProps.visibility)
}

// optional int32 x = 5;
inline bool MainWindowProps::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MainWindowProps::has_x() const {
  return _internal_has_x();
}
inline void MainWindowProps::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t MainWindowProps::_internal_x() const {
  return x_;
}
inline int32_t MainWindowProps::x() const {
  // @@protoc_insertion_point(field_get:lnks.MainWindowProps.x)
  return _internal_x();
}
inline void MainWindowProps::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  x_ = value;
}
inline void MainWindowProps::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:lnks.MainWindowProps.x)
}

// optional int32 y = 6;
inline bool MainWindowProps::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MainWindowProps::has_y() const {
  return _internal_has_y();
}
inline void MainWindowProps::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t MainWindowProps::_internal_y() const {
  return y_;
}
inline int32_t MainWindowProps::y() const {
  // @@protoc_insertion_point(field_get:lnks.MainWindowProps.y)
  return _internal_y();
}
inline void MainWindowProps::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  y_ = value;
}
inline void MainWindowProps::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:lnks.MainWindowProps.y)
}

// optional int32 width = 7;
inline bool MainWindowProps::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MainWindowProps::has_width() const {
  return _internal_has_width();
}
inline void MainWindowProps::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t MainWindowProps::_internal_width() const {
  return width_;
}
inline int32_t MainWindowProps::width() const {
  // @@protoc_insertion_point(field_get:lnks.MainWindowProps.width)
  return _internal_width();
}
inline void MainWindowProps::_internal_set_width(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  width_ = value;
}
inline void MainWindowProps::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:lnks.MainWindowProps.width)
}

// optional int32 height = 8;
inline bool MainWindowProps::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool MainWindowProps::has_height() const {
  return _internal_has_height();
}
inline void MainWindowProps::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline int32_t MainWindowProps::_internal_height() const {
  return height_;
}
inline int32_t MainWindowProps::height() const {
  // @@protoc_insertion_point(field_get:lnks.MainWindowProps.height)
  return _internal_height();
}
inline void MainWindowProps::_internal_set_height(int32_t value) {
  _has_bits_[0] |= 0x00000800u;
  height_ = value;
}
inline void MainWindowProps::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:lnks.MainWindowProps.height)
}

// optional string window_state = 9;
inline bool MainWindowProps::_internal_has_window_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MainWindowProps::has_window_state() const {
  return _internal_has_window_state();
}
inline void MainWindowProps::clear_window_state() {
  window_state_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MainWindowProps::window_state() const {
  // @@protoc_insertion_point(field_get:lnks.MainWindowProps.window_state)
  return _internal_window_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MainWindowProps::set_window_state(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 window_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lnks.MainWindowProps.window_state)
}
inline std::string* MainWindowProps::mutable_window_state() {
  std::string* _s = _internal_mutable_window_state();
  // @@protoc_insertion_point(field_mutable:lnks.MainWindowProps.window_state)
  return _s;
}
inline const std::string& MainWindowProps::_internal_window_state() const {
  return window_state_.Get();
}
inline void MainWindowProps::_internal_set_window_state(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  window_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MainWindowProps::_internal_mutable_window_state() {
  _has_bits_[0] |= 0x00000002u;
  return window_state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MainWindowProps::release_window_state() {
  // @@protoc_insertion_point(field_release:lnks.MainWindowProps.window_state)
  if (!_internal_has_window_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = window_state_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_state_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MainWindowProps::set_allocated_window_state(std::string* window_state) {
  if (window_state != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  window_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), window_state,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (window_state_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    window_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lnks.MainWindowProps.window_state)
}

// optional bool top_level_focus = 10;
inline bool MainWindowProps::_internal_has_top_level_focus() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool MainWindowProps::has_top_level_focus() const {
  return _internal_has_top_level_focus();
}
inline void MainWindowProps::clear_top_level_focus() {
  top_level_focus_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool MainWindowProps::_internal_top_level_focus() const {
  return top_level_focus_;
}
inline bool MainWindowProps::top_level_focus() const {
  // @@protoc_insertion_point(field_get:lnks.MainWindowProps.top_level_focus)
  return _internal_top_level_focus();
}
inline void MainWindowProps::_internal_set_top_level_focus(bool value) {
  _has_bits_[0] |= 0x00000200u;
  top_level_focus_ = value;
}
inline void MainWindowProps::set_top_level_focus(bool value) {
  _internal_set_top_level_focus(value);
  // @@protoc_insertion_point(field_set:lnks.MainWindowProps.top_level_focus)
}

// optional string icon = 11;
inline bool MainWindowProps::_internal_has_icon() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MainWindowProps::has_icon() const {
  return _internal_has_icon();
}
inline void MainWindowProps::clear_icon() {
  icon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MainWindowProps::icon() const {
  // @@protoc_insertion_point(field_get:lnks.MainWindowProps.icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MainWindowProps::set_icon(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lnks.MainWindowProps.icon)
}
inline std::string* MainWindowProps::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:lnks.MainWindowProps.icon)
  return _s;
}
inline const std::string& MainWindowProps::_internal_icon() const {
  return icon_.Get();
}
inline void MainWindowProps::_internal_set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MainWindowProps::_internal_mutable_icon() {
  _has_bits_[0] |= 0x00000004u;
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MainWindowProps::release_icon() {
  // @@protoc_insertion_point(field_release:lnks.MainWindowProps.icon)
  if (!_internal_has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = icon_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MainWindowProps::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lnks.MainWindowProps.icon)
}

// optional string url = 12;
inline bool MainWindowProps::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MainWindowProps::has_url() const {
  return _internal_has_url();
}
inline void MainWindowProps::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& MainWindowProps::url() const {
  // @@protoc_insertion_point(field_get:lnks.MainWindowProps.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MainWindowProps::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lnks.MainWindowProps.url)
}
inline std::string* MainWindowProps::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:lnks.MainWindowProps.url)
  return _s;
}
inline const std::string& MainWindowProps::_internal_url() const {
  return url_.Get();
}
inline void MainWindowProps::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MainWindowProps::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000008u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MainWindowProps::release_url() {
  // @@protoc_insertion_point(field_release:lnks.MainWindowProps.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MainWindowProps::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lnks.MainWindowProps.url)
}

// optional string app_id = 13;
inline bool MainWindowProps::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MainWindowProps::has_app_id() const {
  return _internal_has_app_id();
}
inline void MainWindowProps::clear_app_id() {
  app_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& MainWindowProps::app_id() const {
  // @@protoc_insertion_point(field_get:lnks.MainWindowProps.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MainWindowProps::set_app_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lnks.MainWindowProps.app_id)
}
inline std::string* MainWindowProps::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:lnks.MainWindowProps.app_id)
  return _s;
}
inline const std::string& MainWindowProps::_internal_app_id() const {
  return app_id_.Get();
}
inline void MainWindowProps::_internal_set_app_id(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MainWindowProps::_internal_mutable_app_id() {
  _has_bits_[0] |= 0x00000010u;
  return app_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MainWindowProps::release_app_id() {
  // @@protoc_insertion_point(field_release:lnks.MainWindowProps.app_id)
  if (!_internal_has_app_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = app_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MainWindowProps::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lnks.MainWindowProps.app_id)
}

// optional bool skip_bar = 14;
inline bool MainWindowProps::_internal_has_skip_bar() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool MainWindowProps::has_skip_bar() const {
  return _internal_has_skip_bar();
}
inline void MainWindowProps::clear_skip_bar() {
  skip_bar_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool MainWindowProps::_internal_skip_bar() const {
  return skip_bar_;
}
inline bool MainWindowProps::skip_bar() const {
  // @@protoc_insertion_point(field_get:lnks.MainWindowProps.skip_bar)
  return _internal_skip_bar();
}
inline void MainWindowProps::_internal_set_skip_bar(bool value) {
  _has_bits_[0] |= 0x00000400u;
  skip_bar_ = value;
}
inline void MainWindowProps::set_skip_bar(bool value) {
  _internal_set_skip_bar(value);
  // @@protoc_insertion_point(field_set:lnks.MainWindowProps.skip_bar)
}

// optional bool always_on_top = 15;
inline bool MainWindowProps::_internal_has_always_on_top() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool MainWindowProps::has_always_on_top() const {
  return _internal_has_always_on_top();
}
inline void MainWindowProps::clear_always_on_top() {
  always_on_top_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool MainWindowProps::_internal_always_on_top() const {
  return always_on_top_;
}
inline bool MainWindowProps::always_on_top() const {
  // @@protoc_insertion_point(field_get:lnks.MainWindowProps.always_on_top)
  return _internal_always_on_top();
}
inline void MainWindowProps::_internal_set_always_on_top(bool value) {
  _has_bits_[0] |= 0x00001000u;
  always_on_top_ = value;
}
inline void MainWindowProps::set_always_on_top(bool value) {
  _internal_set_always_on_top(value);
  // @@protoc_insertion_point(field_set:lnks.MainWindowProps.always_on_top)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lnks

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_window_2eproto
