// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: window.proto

#include "window.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace lnks {
constexpr WindowId::WindowId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chromium_id_(0)
  , gecko_id_(0){}
struct WindowIdDefaultTypeInternal {
  constexpr WindowIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WindowIdDefaultTypeInternal() {}
  union {
    WindowId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WindowIdDefaultTypeInternal _WindowId_default_instance_;
constexpr MainWindowList::MainWindowList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : windows_()
  , ok_(false){}
struct MainWindowListDefaultTypeInternal {
  constexpr MainWindowListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MainWindowListDefaultTypeInternal() {}
  union {
    MainWindowList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MainWindowListDefaultTypeInternal _MainWindowList_default_instance_;
constexpr MainWindowProps::MainWindowProps(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , window_state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , x_(0)
  , y_(0)
  , width_(0)
  , ok_(false)
  , visibility_(false)
  , top_level_focus_(false)
  , skip_bar_(false)
  , height_(0)
  , always_on_top_(false){}
struct MainWindowPropsDefaultTypeInternal {
  constexpr MainWindowPropsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MainWindowPropsDefaultTypeInternal() {}
  union {
    MainWindowProps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MainWindowPropsDefaultTypeInternal _MainWindowProps_default_instance_;
}  // namespace lnks
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_window_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_window_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_window_2eproto = nullptr;

const uint32_t TableStruct_window_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::lnks::WindowId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lnks::WindowId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lnks::WindowId, chromium_id_),
  PROTOBUF_FIELD_OFFSET(::lnks::WindowId, gecko_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowList, ok_),
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowList, windows_),
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowProps, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowProps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowProps, id_),
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowProps, ok_),
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowProps, title_),
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowProps, visibility_),
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowProps, x_),
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowProps, y_),
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowProps, width_),
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowProps, height_),
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowProps, window_state_),
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowProps, top_level_focus_),
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowProps, icon_),
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowProps, url_),
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowProps, app_id_),
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowProps, skip_bar_),
  PROTOBUF_FIELD_OFFSET(::lnks::MainWindowProps, always_on_top_),
  ~0u,
  ~0u,
  0,
  8,
  5,
  6,
  7,
  11,
  1,
  9,
  2,
  3,
  4,
  10,
  12,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::lnks::WindowId)},
  { 10, -1, -1, sizeof(::lnks::MainWindowList)},
  { 18, 39, -1, sizeof(::lnks::MainWindowProps)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnks::_WindowId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnks::_MainWindowList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnks::_MainWindowProps_default_instance_),
};

const char descriptor_table_protodef_window_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014window.proto\022\004lnks\"X\n\010WindowId\022\030\n\013chro"
  "mium_id\030\001 \001(\005H\000\210\001\001\022\025\n\010gecko_id\030\002 \001(\005H\001\210\001"
  "\001B\016\n\014_chromium_idB\013\n\t_gecko_id\"=\n\016MainWi"
  "ndowList\022\n\n\002ok\030\001 \001(\010\022\037\n\007windows\030\002 \003(\0132\016."
  "lnks.WindowId\"\357\003\n\017MainWindowProps\022\032\n\002id\030"
  "\001 \001(\0132\016.lnks.WindowId\022\n\n\002ok\030\002 \001(\010\022\022\n\005tit"
  "le\030\003 \001(\tH\000\210\001\001\022\027\n\nvisibility\030\004 \001(\010H\001\210\001\001\022\016"
  "\n\001x\030\005 \001(\005H\002\210\001\001\022\016\n\001y\030\006 \001(\005H\003\210\001\001\022\022\n\005width\030"
  "\007 \001(\005H\004\210\001\001\022\023\n\006height\030\010 \001(\005H\005\210\001\001\022\031\n\014windo"
  "w_state\030\t \001(\tH\006\210\001\001\022\034\n\017top_level_focus\030\n "
  "\001(\010H\007\210\001\001\022\021\n\004icon\030\013 \001(\tH\010\210\001\001\022\020\n\003url\030\014 \001(\t"
  "H\t\210\001\001\022\023\n\006app_id\030\r \001(\tH\n\210\001\001\022\025\n\010skip_bar\030\016"
  " \001(\010H\013\210\001\001\022\032\n\ralways_on_top\030\017 \001(\010H\014\210\001\001B\010\n"
  "\006_titleB\r\n\013_visibilityB\004\n\002_xB\004\n\002_yB\010\n\006_w"
  "idthB\t\n\007_heightB\017\n\r_window_stateB\022\n\020_top"
  "_level_focusB\007\n\005_iconB\006\n\004_urlB\t\n\007_app_id"
  "B\013\n\t_skip_barB\020\n\016_always_on_topb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_window_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_window_2eproto = {
  false, false, 679, descriptor_table_protodef_window_2eproto, "window.proto", 
  &descriptor_table_window_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_window_2eproto::offsets,
  file_level_metadata_window_2eproto, file_level_enum_descriptors_window_2eproto, file_level_service_descriptors_window_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_window_2eproto_getter() {
  return &descriptor_table_window_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_window_2eproto(&descriptor_table_window_2eproto);
namespace lnks {

// ===================================================================

class WindowId::_Internal {
 public:
  using HasBits = decltype(std::declval<WindowId>()._has_bits_);
  static void set_has_chromium_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gecko_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WindowId::WindowId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lnks.WindowId)
}
WindowId::WindowId(const WindowId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chromium_id_, &from.chromium_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gecko_id_) -
    reinterpret_cast<char*>(&chromium_id_)) + sizeof(gecko_id_));
  // @@protoc_insertion_point(copy_constructor:lnks.WindowId)
}

inline void WindowId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chromium_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gecko_id_) -
    reinterpret_cast<char*>(&chromium_id_)) + sizeof(gecko_id_));
}

WindowId::~WindowId() {
  // @@protoc_insertion_point(destructor:lnks.WindowId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WindowId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WindowId::ArenaDtor(void* object) {
  WindowId* _this = reinterpret_cast< WindowId* >(object);
  (void)_this;
}
void WindowId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WindowId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WindowId::Clear() {
// @@protoc_insertion_point(message_clear_start:lnks.WindowId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chromium_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gecko_id_) -
        reinterpret_cast<char*>(&chromium_id_)) + sizeof(gecko_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WindowId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 chromium_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chromium_id(&has_bits);
          chromium_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 gecko_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gecko_id(&has_bits);
          gecko_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WindowId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnks.WindowId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 chromium_id = 1;
  if (_internal_has_chromium_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chromium_id(), target);
  }

  // optional int32 gecko_id = 2;
  if (_internal_has_gecko_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gecko_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnks.WindowId)
  return target;
}

size_t WindowId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnks.WindowId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 chromium_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_chromium_id());
    }

    // optional int32 gecko_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_gecko_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WindowId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WindowId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WindowId::GetClassData() const { return &_class_data_; }

void WindowId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WindowId *>(to)->MergeFrom(
      static_cast<const WindowId &>(from));
}


void WindowId::MergeFrom(const WindowId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnks.WindowId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chromium_id_ = from.chromium_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      gecko_id_ = from.gecko_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WindowId::CopyFrom(const WindowId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnks.WindowId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowId::IsInitialized() const {
  return true;
}

void WindowId::InternalSwap(WindowId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WindowId, gecko_id_)
      + sizeof(WindowId::gecko_id_)
      - PROTOBUF_FIELD_OFFSET(WindowId, chromium_id_)>(
          reinterpret_cast<char*>(&chromium_id_),
          reinterpret_cast<char*>(&other->chromium_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WindowId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_window_2eproto_getter, &descriptor_table_window_2eproto_once,
      file_level_metadata_window_2eproto[0]);
}

// ===================================================================

class MainWindowList::_Internal {
 public:
};

MainWindowList::MainWindowList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  windows_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lnks.MainWindowList)
}
MainWindowList::MainWindowList(const MainWindowList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      windows_(from.windows_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:lnks.MainWindowList)
}

inline void MainWindowList::SharedCtor() {
ok_ = false;
}

MainWindowList::~MainWindowList() {
  // @@protoc_insertion_point(destructor:lnks.MainWindowList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MainWindowList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MainWindowList::ArenaDtor(void* object) {
  MainWindowList* _this = reinterpret_cast< MainWindowList* >(object);
  (void)_this;
}
void MainWindowList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MainWindowList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MainWindowList::Clear() {
// @@protoc_insertion_point(message_clear_start:lnks.MainWindowList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  windows_.Clear();
  ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MainWindowList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .lnks.WindowId windows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_windows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MainWindowList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnks.MainWindowList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  // repeated .lnks.WindowId windows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_windows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_windows(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnks.MainWindowList)
  return target;
}

size_t MainWindowList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnks.MainWindowList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnks.WindowId windows = 2;
  total_size += 1UL * this->_internal_windows_size();
  for (const auto& msg : this->windows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MainWindowList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MainWindowList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MainWindowList::GetClassData() const { return &_class_data_; }

void MainWindowList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MainWindowList *>(to)->MergeFrom(
      static_cast<const MainWindowList &>(from));
}


void MainWindowList::MergeFrom(const MainWindowList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnks.MainWindowList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  windows_.MergeFrom(from.windows_);
  if (from._internal_ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MainWindowList::CopyFrom(const MainWindowList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnks.MainWindowList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainWindowList::IsInitialized() const {
  return true;
}

void MainWindowList::InternalSwap(MainWindowList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  windows_.InternalSwap(&other->windows_);
  swap(ok_, other->ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MainWindowList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_window_2eproto_getter, &descriptor_table_window_2eproto_once,
      file_level_metadata_window_2eproto[1]);
}

// ===================================================================

class MainWindowProps::_Internal {
 public:
  using HasBits = decltype(std::declval<MainWindowProps>()._has_bits_);
  static const ::lnks::WindowId& id(const MainWindowProps* msg);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_window_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_top_level_focus(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_skip_bar(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_always_on_top(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::lnks::WindowId&
MainWindowProps::_Internal::id(const MainWindowProps* msg) {
  return *msg->id_;
}
MainWindowProps::MainWindowProps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lnks.MainWindowProps)
}
MainWindowProps::MainWindowProps(const MainWindowProps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  window_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    window_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_window_state()) {
    window_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_window_state(), 
      GetArenaForAllocation());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_id()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::lnks::WindowId(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&always_on_top_) -
    reinterpret_cast<char*>(&x_)) + sizeof(always_on_top_));
  // @@protoc_insertion_point(copy_constructor:lnks.MainWindowProps)
}

inline void MainWindowProps::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
window_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  window_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&always_on_top_) -
    reinterpret_cast<char*>(&id_)) + sizeof(always_on_top_));
}

MainWindowProps::~MainWindowProps() {
  // @@protoc_insertion_point(destructor:lnks.MainWindowProps)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MainWindowProps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  window_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void MainWindowProps::ArenaDtor(void* object) {
  MainWindowProps* _this = reinterpret_cast< MainWindowProps* >(object);
  (void)_this;
}
void MainWindowProps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MainWindowProps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MainWindowProps::Clear() {
// @@protoc_insertion_point(message_clear_start:lnks.MainWindowProps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      window_state_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      app_id_.ClearNonDefaultToEmpty();
    }
  }
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&x_)) + sizeof(width_));
  }
  ok_ = false;
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&visibility_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&always_on_top_) -
        reinterpret_cast<char*>(&visibility_)) + sizeof(always_on_top_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MainWindowProps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .lnks.WindowId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ok = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnks.MainWindowProps.title"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool visibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_visibility(&has_bits);
          visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string window_state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_window_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnks.MainWindowProps.window_state"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool top_level_focus = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_top_level_focus(&has_bits);
          top_level_focus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnks.MainWindowProps.icon"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnks.MainWindowProps.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string app_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnks.MainWindowProps.app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool skip_bar = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_skip_bar(&has_bits);
          skip_bar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool always_on_top = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_always_on_top(&has_bits);
          always_on_top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MainWindowProps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnks.MainWindowProps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnks.WindowId id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // bool ok = 2;
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ok(), target);
  }

  // optional string title = 3;
  if (_internal_has_title()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnks.MainWindowProps.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // optional bool visibility = 4;
  if (_internal_has_visibility()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_visibility(), target);
  }

  // optional int32 x = 5;
  if (_internal_has_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_x(), target);
  }

  // optional int32 y = 6;
  if (_internal_has_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_y(), target);
  }

  // optional int32 width = 7;
  if (_internal_has_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_width(), target);
  }

  // optional int32 height = 8;
  if (_internal_has_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_height(), target);
  }

  // optional string window_state = 9;
  if (_internal_has_window_state()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_window_state().data(), static_cast<int>(this->_internal_window_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnks.MainWindowProps.window_state");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_window_state(), target);
  }

  // optional bool top_level_focus = 10;
  if (_internal_has_top_level_focus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_top_level_focus(), target);
  }

  // optional string icon = 11;
  if (_internal_has_icon()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnks.MainWindowProps.icon");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_icon(), target);
  }

  // optional string url = 12;
  if (_internal_has_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnks.MainWindowProps.url");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_url(), target);
  }

  // optional string app_id = 13;
  if (_internal_has_app_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnks.MainWindowProps.app_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_app_id(), target);
  }

  // optional bool skip_bar = 14;
  if (_internal_has_skip_bar()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_skip_bar(), target);
  }

  // optional bool always_on_top = 15;
  if (_internal_has_always_on_top()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_always_on_top(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnks.MainWindowProps)
  return target;
}

size_t MainWindowProps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnks.MainWindowProps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string title = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string window_state = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_window_state());
    }

    // optional string icon = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

    // optional string url = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string app_id = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_id());
    }

  }
  // .lnks.WindowId id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (cached_has_bits & 0x000000e0u) {
    // optional int32 x = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
    }

    // optional int32 y = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
    }

    // optional int32 width = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
    }

  }
  // bool ok = 2;
  if (this->_internal_ok() != 0) {
    total_size += 1 + 1;
  }

  if (cached_has_bits & 0x00001f00u) {
    // optional bool visibility = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool top_level_focus = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool skip_bar = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional int32 height = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
    }

    // optional bool always_on_top = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MainWindowProps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MainWindowProps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MainWindowProps::GetClassData() const { return &_class_data_; }

void MainWindowProps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MainWindowProps *>(to)->MergeFrom(
      static_cast<const MainWindowProps &>(from));
}


void MainWindowProps::MergeFrom(const MainWindowProps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnks.MainWindowProps)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_window_state(from._internal_window_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_app_id(from._internal_app_id());
    }
  }
  if (from._internal_has_id()) {
    _internal_mutable_id()->::lnks::WindowId::MergeFrom(from._internal_id());
  }
  if (cached_has_bits & 0x000000e0u) {
    if (cached_has_bits & 0x00000020u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000040u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000080u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      visibility_ = from.visibility_;
    }
    if (cached_has_bits & 0x00000200u) {
      top_level_focus_ = from.top_level_focus_;
    }
    if (cached_has_bits & 0x00000400u) {
      skip_bar_ = from.skip_bar_;
    }
    if (cached_has_bits & 0x00000800u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00001000u) {
      always_on_top_ = from.always_on_top_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MainWindowProps::CopyFrom(const MainWindowProps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnks.MainWindowProps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainWindowProps::IsInitialized() const {
  return true;
}

void MainWindowProps::InternalSwap(MainWindowProps* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &window_state_, lhs_arena,
      &other->window_state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MainWindowProps, always_on_top_)
      + sizeof(MainWindowProps::always_on_top_)
      - PROTOBUF_FIELD_OFFSET(MainWindowProps, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MainWindowProps::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_window_2eproto_getter, &descriptor_table_window_2eproto_once,
      file_level_metadata_window_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace lnks
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lnks::WindowId* Arena::CreateMaybeMessage< ::lnks::WindowId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lnks::WindowId >(arena);
}
template<> PROTOBUF_NOINLINE ::lnks::MainWindowList* Arena::CreateMaybeMessage< ::lnks::MainWindowList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lnks::MainWindowList >(arena);
}
template<> PROTOBUF_NOINLINE ::lnks::MainWindowProps* Arena::CreateMaybeMessage< ::lnks::MainWindowProps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lnks::MainWindowProps >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
